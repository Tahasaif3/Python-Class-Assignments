# -*- coding: utf-8 -*-
"""python_class_assignment_04.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eZbFJX13pV_mniFnBp_MiBcWkplS7DKk

# Python Assignment 04

**List Methods Practice**

**Tasks:**

**1. Create and Modify Lists**

o **Create a list called fruits with the items: "apple", "banana", "orange"**

o **Add "grape" to the end of the list using an appropriate method**

o **Insert "mango" at position 2 in the list**

o **Remove "banana" from the list**

o **Print the final list**
"""

fruits = ["apple", "banana", "orange"]
print("Fruits:", fruits)
fruits.append("grape")
fruits.insert(2, "mango")
fruits.remove("banana")
print("Final Fruits", fruits)

"""**2**. **List Operations**

o **Create a list numbers with values: 10, 20, 30, 40, 50**

o **Create a second list more_numbers with values: 60, 70, 80**

o **Combine both lists into a new list called all_numbers**

o **Make a copy of all_numbers called numbers_copy**

o **Reverse the order of numbers_copy**

o **Print both all_numbers and numbers_copy**
"""

numbers = [10, 20, 30, 40, 50]
more_numbers = [60, 70, 80]
all_numbers = numbers + more_numbers
numbers_copy = all_numbers.copy()
numbers_copy.reverse()
print("All Numbers:", all_numbers)
print("Numbers Copy:", numbers_copy)

"""**3**. **Sorting and Counting**

o **Create a list scores with these values: 85, 92, 78, 65, 92, 85, 74**

o **Sort the list in ascending order**

o **Sort the list in descending order**

o **Count how many times 92 appears in the list**

o **Find and print the highest and lowest scores**

o **Print the sorted list**
"""

scores = [ 85, 92, 78, 65, 92, 85, 74]
scores.sort()
print("Ascending Order:", scores)
scores.sort(reverse=True)
print("Descending Order:", scores)
count_92 = scores.count(92)
print("Count of 92:", count_92)
highest_score = max(scores)
lowest_score = min(scores)
print("Highest Score:", highest_score)
print("Lowest Score:", lowest_score)
print("Sorted List:", scores)

"""**4.** **List Manipulation**

o **Create a list letters with values: "a", "b", "c", "d", "e"**

o **Use slicing to create a new list with only the first three letters**

o **Use slicing to create another list with only the last two letters**

o **Find and print the index of "c" in the lis**

o **Replace "d" with "z" in the original list**

o **Print the modified list**
"""

letters = ["a", "b", "c", "d", "e"]
first_three = letters[:3]
last_two = letters[-2:]
print("First Three:", first_three)
print("Last Two:", last_two)
index_of_c = letters.index("c")
print("Index of 'c':", index_of_c)
letters[3] = "z"
print("Modified List:", letters)

"""**Dictionary Methods Practice**

**Tasks:**

**1**. **Create and Access Dictionaries**

o** Create a dictionary called student with these key-value pairs:**

 **"name": John"**

 {**"age": 20**
 **"grade": "A"**
 **"courses": ["Math", "Science", "History"]**
o **Print the student's name**
}

o **Print the list of courses**

o **Add a new key-value pair: "email": "john@example.com"**

o **Print the entire dictionary**
"""

student = {
    "name": "John",
    "age": 20,
    "grade": "A",
    "courses": ["Math", "Science", "History"]
}
print("Student Name:", student["name"])
print("Courses:", student["courses"])
student["email"] = "john@example.com"
print("Updated Student Dwtails:", student)

"""**2**.**Modify Dictionary Values**

o **Change the student's age to 21**

o **Add a new course "Computer Science" to the courses list**

o **Update the grade to "A+"**

o **Print the modified dictionary**
"""

student = {
    "name": "John",
    "age": 20,
    "grade": "A",
    "courses": ["Math", "Science", "History"],
    "email": "john@example.com"
}
student["age"] = 21
student["courses"].append("Computer Science")
student["grade"] = "A+"
print("Modified Student Details:", student)

"""**3**. **Dictionary Operations**

o **Create a second dictionary student_address with these key-value pairs:**

 **"street": "123 College Ave"**

 **"city": "New York"**

 **"zip": "10001"**

o **Combine both dictionaries into a new dictionary called student_info**

o **Remove the "zip" key from student_info**

o **Check if "phone" exists in the dictionary**

o **Print the final dictionary**
"""

student = {
    "name": "John",
    "age": 21,
    "grade": "A+",
    "courses": ["Math", "Science", "History","Computer Science"],
    "email": "john@example.com"
}
student_address = {
    "street": "123 College Ave",
    "city": "New York",
    "zip": "10001"
}
student_info = {**student, **student_address}
del student_info["zip"]
if "phone" in student_info:
    print("Phone exists in student_info")
else:
    print("Phone does not exist in student_info")

print("Student Info:", student_info)

"""4.**Dictionary Methods**

o **Create a dictionary word_count with these key-value pairs:**

 **"hello": 5**

 **"world": 10**

 **"python": 15**

o **Get all keys and print them as a list**

o **Get all values and print them as a list**

o **Get all key-value pairs and print them**

o **Make a copy of the dictionary**

o **Clear the original dictionary**

o **Print both dictionaries to verify one is empty and one is a copy**
"""

word_count = {
    "hello": 5,
    "world": 10,
    "python": 15
}
keys = list(word_count.keys())
print("Keys:", keys)
values = list(word_count.values())
print("Values:", values)
key_value_pairs = list(word_count.items())
print("Key-Value Pairs:", key_value_pairs)
word_count_copy = word_count.copy()
word_count.clear()
print("Original Words Count Dictionary:", word_count)
print("Copy of Words Count Dictionary:", word_count_copy)

"""**Shopping Discount Calculator**

**Tasks:**

**1**.**Set up the initial variables:**

o **purchase_amount: The total cost of items in the shopping cart**

o **is_loyalty_member**:**Boolean indicating if the customer is a**
**loyalty member**

o **day_of_week: A string with the current day (e.g., "Monday", "Tuesday", etc.)**

o **is_holiday_season:** **Boolean indicating if it's currently a holiday shopping**
**season**


**2**.**Apply discount rules using if statements:**

o **If purchase amount is greater than $100, apply a 10% discount**

o **If purchase amount is greater than $50 (but less than or equal to $100)**,
**apply a 5% discount**

o **If the customer is a loyalty member, apply an additional 5% discount**

o **If it's a weekend (Saturday or Sunday), apply an additional 2% discount**

o **If it's a holiday season, apply an additional 8% discount**

**3**.**Calculate and display:**

o **The original purchase amount**

o **Each discount that was applied and its amount**

o **The final price after all discounts**

**✅ Step 1: Set up the initial variables**
"""

purchase_amount = 100
is_loyalty_member = True
day_of_week = "Monday"
is_holiday_season = False

"""**✅ Step 2: Apply discount rules using if statements**"""

# Setup Initial vairables
purchase_amount = 100
is_loyalty_member = True
day_of_week = "Monday"
is_holiday_season = False

# Store original purchase amount
original_price = purchase_amount

# Initialize Dicount Variables
discount__10_percentage = 0
discount__5_percentage = 0
loyality_dicount = 0
weekend_discount = 0
holiday_discount = 0

# Apply Discount Rules
if purchase_amount > 100:
    discount__10_percentage = purchase_amount * 0.1
elif purchase_amount > 50 and purchase_amount <= 100:
    discount__5_percentage = purchase_amount * 0.05
if is_loyalty_member:
    loyalty_discount = purchase_amount * 0.05

if day_of_week.lower() == "saturday" or day_of_week.lower() == "sunday":
    weekend_discount = purchase_amount * 0.02

if is_holiday_season:
    holiday_discount = purchase_amount * 0.08

#Total Discount Calculate
total_discount = discount__10_percentage + discount__5_percentage + loyalty_discount + weekend_discount + holiday_discount

#Final Price Calculate
final_price = purchase_amount - total_discount

"""✅ **Step 3: Calculate and Display**"""

# Setup Initial vairables
purchase_amount = 100
is_loyalty_member = True
day_of_week = "Monday"
is_holiday_season = False

# Store original purchase amount
original_price = purchase_amount

# Initialize Dicount Variables
discount__10_percentage = 0
discount__5_percentage = 0
loyality_dicount = 0
weekend_discount = 0
holiday_discount = 0

# Apply Discount Rules
if purchase_amount > 100:
    discount__10_percentage = purchase_amount * 0.1
elif purchase_amount > 50 and purchase_amount <= 100:
    discount__5_percentage = purchase_amount * 0.05
if is_loyalty_member:
    loyalty_discount = purchase_amount * 0.05

if day_of_week.lower() == "saturday" or day_of_week.lower() == "sunday":
    weekend_discount = purchase_amount * 0.02

if is_holiday_season:
    holiday_discount = purchase_amount * 0.08

#Total Discount Calculate
total_discount = discount__10_percentage + discount__5_percentage + loyalty_discount + weekend_discount + holiday_discount

#Final Price Calculate
final_price = purchase_amount - total_discount

print("Original Purchase Amount:", original_price)

if discount__10_percentage > 0:
    print("Discount 10%:", discount__10_percentage)
elif discount__5_percentage > 0:
    print("Discount 5%:", discount__5_percentage)
if loyalty_discount > 0:
    print("Loyalty Discount:", loyalty_discount)
if weekend_discount > 0:
    print("Weekend Discount:", weekend_discount)
if holiday_discount > 0:
    print("Holiday Discount:", holiday_discount)

print("Total Discount:", total_discount)
print("Final Price After Discounts:", final_price)

"""**For Loop Assignment - Number Patterns**

**Tasks":**

**1. Pattern 1: Counting Numbers**

 **o Print numbers from 1 to 10 on a single line.**
"""

for i in range(1, 11):
    print(i, end=" ")

"""**Pattern 2: Multiplication Table**

** Create a multiplication table for the number 5 (from 1 to 10).**
"""

table_number = 5
for i in range(1, 11):
    print(f"{table_number} x {i} = {table_number * i}")

"""**While Loop Assignment - Interactive Game**

**Create a simple number guessing game using a while loop.**

**Instructions:**

**Write a Python program that:**

**1. Sets a "secret number" (you can choose any number between 1 and 50)**

**2. Asks the player to guess the number**

**3. Tells the player if their guess is too high or too low**

**4. Keeps asking until the player guesses correctly**

**5. Keeps track of how many guesses it took**
"""

import random

secret_number = random.randint(1, 50)
guess_count = 0

guess = int(input("Guess a number between 1 and 50: "))
guess_count += 1

while guess != secret_number:
    if guess < secret_number:
        print("Too Low!")
    else:
        print("Too High!")
    guess = int(input("Guess again: "))
    guess_count += 1

print("Congratulations! You guessed the number.")
print("It took you", guess_count, "guesses.")

"""**Student Grade Management System**

**Assignment Overview:**
**In this assignment**
**you will create a simple student grade management system using**

**Python lists and dictionaries. This will help you understand how these data structures**

**work together to organize and manage information.**
**Requirements:**

**Create a Python program that does the following:**

**1. Create a list to store information about students**

**2. Each student should be represented as a dictionary with the following keys:**

**o name: The student's full name**

**o id: A unique student ID number**

**o grades: Another dictionary containing course names as keys and grades as**
**values**

**3. Your program should:**

**o Add at least 3 students to the list**

**o Add grades for at least 3 courses for each student**
**o Display all students with their grades**

**o Calculate and display the average grade for each student**

**o Find and display the student with the highest average grade**

**o List all students with an average grade above 80**

**o Calculate and display the average grade for a specific course**

**o Add a new student to the system**
"""

# Student Grade Management System

# 1. Create an empty list to store student information
students = []

# 2. Add students with their details
# Student 1
students.append({
    "name": "Ahmed Khan",
    "id": 1001,
    "grades": {
        "Math": 87,
        "Science": 92,
        "English": 78
    }
})

# Student 2
students.append({
    "name": "Ayesha Fatima",
    "id": 1002,
    "grades": {
        "Math": 95,
        "Science": 88,
        "English": 91
    }
})

# Student 3
students.append({
    "name": "Bilal Ahmed",
    "id": 1003,
    "grades": {
        "Math": 72,
        "Science": 78,
        "English": 84
    }
})

# Function to calculate average grade for a student
def calculate_average(grades):
    return sum(grades.values()) / len(grades)

# 3. Display all students with their grades
print("All Students and Their Grades:")
print("-" * 40)
for student in students:
    print(f"Name: {student['name']}")
    print(f"ID: {student['id']}")
    print("Grades:")
    for course, grade in student['grades'].items():
        print(f"  {course}: {grade}")
    print()

# 4. Calculate and display average grade for each student
print("Average Grades:")
print("-" * 40)
for student in students:
    avg = calculate_average(student['grades'])
    print(f"{student['name']}: {avg:.2f}")
print()

# 5. Find and display student with highest average grade
highest_avg = 0
top_student = None

for student in students:
    avg = calculate_average(student['grades'])
    if avg > highest_avg:
        highest_avg = avg
        top_student = student

print("Student with Highest Average Grade:")
print("-" * 40)
print(f"Name: {top_student['name']}")
print(f"ID: {top_student['id']}")
print(f"Average Grade: {highest_avg:.2f}")
print()

# 6. List all students with average grade above 80
print("Students with Average Grade Above 80:")
print("-" * 40)
for student in students:
    avg = calculate_average(student['grades'])
    if avg > 80:
        print(f"{student['name']} - Average: {avg:.2f}")
print()

# 7. Calculate and display average grade for a specific course
def course_average(course_name):
    total = 0
    count = 0
    for student in students:
        if course_name in student['grades']:
            total += student['grades'][course_name]
            count += 1
    if count > 0:
        return total / count
    else:
        return 0

# Calculate average for specific courses
print("Course Averages:")
print("-" * 40)
courses = ["Math", "Science", "English"]
for course in courses:
    avg = course_average(course)
    print(f"{course}: {avg:.2f}")

# Add a new student in the system
new_student = {
    "name": "Taha",
    "id": 1004,
    "grades": {
        "Math": 90,
        "Science": 85,
        "English": 92
    }
}
students.append(new_student)
# Display the updated student list
print("\nUpdated Student List After Adding New Student:")
print("-" * 40)
for student in students:
    print(f"Name: {student['name']}")
    print(f"ID: {student['id']}")
    print("Grades:")
    for course, grade in student['grades'].items():
        print(f"  {course}: {grade}")
    print()

# Calculate and display the average for the new student
new_student_avg = calculate_average(new_student['grades'])
print(f"New Student Average: {new_student['name']} - {new_student_avg:.2f}")